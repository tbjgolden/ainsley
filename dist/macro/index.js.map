{"version":3,"file":"index.js","sources":["../../src/macro/index.ts"],"sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport { createMacro } from 'babel-plugin-macros'\nimport JSON5 from 'json5'\nimport { doSync } from './doSync'\nimport { Ainsley } from '..'\n\nconst minifyAinsley = doSync(async (inputAinsley, dirName) => {\n  const {\n    flatten,\n    minify\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n  } = require(dirName as string)\n\n  const flatAinsley = await flatten(inputAinsley as Ainsley)\n  return minify(flatAinsley)\n})\n\nexport default createMacro(({ references, state, babel }) => {\n  references.default.forEach((referencePath) => {\n    if (referencePath.parentPath.type === 'CallExpression') {\n      try {\n        if (state.file !== undefined && state.file !== null) {\n          const dirPath = path.dirname(state.file.opts.filename as string)\n\n          if (dirPath) {\n            let args = referencePath.parentPath.get('arguments')\n            if (!Array.isArray(args)) args = [args]\n\n            if (args.length > 0) {\n              const ainsley = fs.readFileSync(\n                path.resolve(dirPath, args[0].evaluate().value),\n                'utf8'\n              )\n\n              const ast = babel.parseSync(\n                `const ainsley = ${JSON.stringify(\n                  minifyAinsley(\n                    JSON5.parse(ainsley),\n                    path.join(__dirname, '../..')\n                  )\n                )}`\n              )\n\n              if (ast !== null && ast.type === 'File') {\n                const firstStatement = ast.program.body[0]\n                if (firstStatement !== undefined) {\n                  if (firstStatement.type === 'VariableDeclaration') {\n                    const firstDeclaration = firstStatement.declarations[0]\n\n                    if (firstDeclaration.init !== null) {\n                      referencePath.parentPath.replaceWith(\n                        firstDeclaration.init\n                      )\n                      return\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        throw err\n        //\n      }\n      throw new Error(`Error with ainsley/macroÂ call`)\n    }\n  })\n})\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcE,IAAA;AACA,IAAA;;;;QAKE,4BAA4B;gBACtB;;;;;;;;0CAMoB;;6CAEG;4CACH;;;oDAeM;;;;uFAMD;;;;sBAenB;;;;;;;;;;;;;;;;;;;;;;;;;;;"}